// <auto-generated />
using System;
using GhostWriter.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GhostWriter.Infrastructure.Migrations
{
    [DbContext(typeof(Entities))]
    [Migration("20210513111204_notification")]
    partial class notification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BuzzwordProject", b =>
                {
                    b.Property<int>("BuzzwordsId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.HasKey("BuzzwordsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("BuzzwordProject");
                });

            modelBuilder.Entity("BuzzwordUserRoleData", b =>
                {
                    b.Property<int>("BuzzwordsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRoleDatasId")
                        .HasColumnType("integer");

                    b.HasKey("BuzzwordsId", "UserRoleDatasId");

                    b.HasIndex("UserRoleDatasId");

                    b.ToTable("BuzzwordUserRoleData");
                });

            modelBuilder.Entity("ExpertiseAreaProject", b =>
                {
                    b.Property<int>("ExpertiseAreasId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.HasKey("ExpertiseAreasId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("ExpertiseAreaProject");
                });

            modelBuilder.Entity("ExpertiseAreaUserRoleData", b =>
                {
                    b.Property<int>("ExpertiseAreasId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRoleDatasId")
                        .HasColumnType("integer");

                    b.HasKey("ExpertiseAreasId", "UserRoleDatasId");

                    b.HasIndex("UserRoleDatasId");

                    b.ToTable("ExpertiseAreaUserRoleData");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "b791a733-13e1-427d-81cb-655a058aa6ca",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "9c2a0f96-31f2-4edd-9ca8-8321d732135a",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "fa5a1b9a-4b11-4e52-b966-8e3b509871fa",
                            Name = "Ghostwriter",
                            NormalizedName = "GHOSTWRITER"
                        });
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed8c5450-799e-4b09-9de2-b5caec05e07b",
                            DateCreated = new DateTime(2021, 5, 13, 11, 12, 3, 536, DateTimeKind.Utc).AddTicks(7159),
                            Email = "aleksandar_stojcic@code3profit.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR_STOJCIC@CODE3PROFIT.COM",
                            NormalizedUserName = "ALEKSANDAR_STOJCIC@CODE3PROFIT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKylfqkKNWBQHq+OfqhjCvbWfrYT/XdJ/XirYNFx935Wyt+bYpKbG2+VpixUio29eA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fac6b57-5c7e-4992-bf7d-3a3b2e86193d",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar_stojcic@code3profit.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88033c05-2273-4b1a-a7b6-3eae460af4fc",
                            DateCreated = new DateTime(2021, 5, 13, 11, 12, 3, 546, DateTimeKind.Utc).AddTicks(4636),
                            Email = "dasa_manic@code3profit.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DASA_MANIC@CODE3PROFIT.COM",
                            NormalizedUserName = "DASA_MANIC@CODE3PROFIT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVoExh2IHKMBEsuSC6uzIBFql0tSbjdiEjaErgvYbT7Ty7SlO7RjPhEwsjBOHGjLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3eada416-78fd-4689-a54a-a521231e5ec4",
                            TwoFactorEnabled = false,
                            UserName = "dasa_manic@code3profit.com"
                        });
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserRoleDataId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserRoleDataId")
                        .IsUnique();

                    b.ToTable("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("GHWReceivedConfirmation")
                        .HasColumnType("boolean");

                    b.Property<int?>("HeadProposalId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool>("PlagueScanned")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalServiceCharges")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HeadProposalId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.BookingStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingStatusHistory");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Buzzword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buzzword");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BinaryDocumentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HeadProposalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BinaryDocumentId");

                    b.HasIndex("HeadProposalId")
                        .IsUnique();

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Dispute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateClosed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DisputeStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Dispute");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("CopyLeaksScanId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("FileBinary")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsFinalVersion")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalPath")
                        .HasColumnType("text");

                    b.Property<string>("PrivateName")
                        .HasColumnType("text");

                    b.Property<string>("PublicName")
                        .HasColumnType("text");

                    b.Property<int?>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ExpertiseArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExpertiseArea");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.HeadProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GHWId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GHWId");

                    b.HasIndex("ProjectId");

                    b.ToTable("HeadProposal");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.KindOfWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KindOfWork");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BinaryDocumentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTimeSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsLogMessage")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<int?>("SentByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BinaryDocumentId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SentByUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BinaryDocumentId")
                        .HasColumnType("integer");

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DatePlanned")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateRealised")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinalMilestone")
                        .HasColumnType("boolean");

                    b.Property<int>("MilestoneStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BinaryDocumentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Milestone");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DetailsLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiverUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("BinaryData")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LocalPath")
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("text");

                    b.Property<string>("SeoFilename")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.PlagiarismCheckInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AggregatedScore")
                        .HasColumnType("double precision");

                    b.Property<long>("Credits")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<long>("IdenticalWords")
                        .HasColumnType("bigint");

                    b.Property<long>("MinorChangedWords")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedMeaningWords")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("TotalExcluded")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalWordsScanned")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("PlagiarismCheckInformation");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("CalculatedServiceCharges")
                        .HasColumnType("numeric");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int>("KindOfWorkId")
                        .HasColumnType("integer");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("numeric");

                    b.Property<int?>("MinimumDegreeId")
                        .HasColumnType("integer");

                    b.Property<int>("PagesNo")
                        .HasColumnType("integer");

                    b.Property<decimal>("PlannedBudget")
                        .HasColumnType("numeric");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectTopic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("KindOfWorkId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MinimumDegreeId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ChildProposalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("FinancialOffer")
                        .HasColumnType("numeric");

                    b.Property<int?>("HeadProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("MilestonesCnt")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentProposalId")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalMessage")
                        .HasColumnType("text");

                    b.Property<int>("ProposalType")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServiceCharges")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ChildProposalId")
                        .IsUnique();

                    b.HasIndex("HeadProposalId");

                    b.ToTable("Proposal");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ProposalStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalStatusHistory");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("RateWriter")
                        .HasColumnType("integer");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ServiceCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("ChargeAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean");

                    b.Property<int?>("ServiceChargeTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceChargeTypeId");

                    b.ToTable("ServiceCharge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargeAmount = 20m,
                            IsDefault = true,
                            IsPercentage = false,
                            StartDate = new DateTime(9999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ChargeAmount = 20m,
                            EndDate = new DateTime(2021, 5, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDefault = false,
                            IsPercentage = false,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ServiceChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceChargeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Default Service Charge",
                            Name = "Default Service Charge"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Service Charge",
                            Name = "Service Charge"
                        });
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text");

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethodNonce")
                        .HasColumnType("text");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.UserRoleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AvgPricePerPage")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("DirectBooking")
                        .HasColumnType("boolean");

                    b.Property<int?>("HighestDegreeId")
                        .HasColumnType("integer");

                    b.Property<string>("IBAN")
                        .HasColumnType("text");

                    b.Property<int>("JobsPostedCnt")
                        .HasColumnType("integer");

                    b.Property<int>("PagesPerDay")
                        .HasColumnType("integer");

                    b.Property<bool>("PaymentVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("PaypalEmail")
                        .HasColumnType("text");

                    b.Property<string>("PaypalPayerID")
                        .HasColumnType("text");

                    b.Property<int?>("PictureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PricePerPage")
                        .HasColumnType("numeric");

                    b.Property<string>("ProfileIntroduction")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HighestDegreeId");

                    b.HasIndex("PictureId");

                    b.ToTable("UserRoleData");
                });

            modelBuilder.Entity("KindOfWorkUserRoleData", b =>
                {
                    b.Property<int>("KindOfWorksId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRoleDatasId")
                        .HasColumnType("integer");

                    b.HasKey("KindOfWorksId", "UserRoleDatasId");

                    b.HasIndex("UserRoleDatasId");

                    b.ToTable("KindOfWorkUserRoleData");
                });

            modelBuilder.Entity("LanguageUserRoleData", b =>
                {
                    b.Property<int>("LanguagesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRoleDatasId")
                        .HasColumnType("integer");

                    b.HasKey("LanguagesId", "UserRoleDatasId");

                    b.HasIndex("UserRoleDatasId");

                    b.ToTable("LanguageUserRoleData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectServiceCharge", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceChargesId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectsId", "ServiceChargesId");

                    b.HasIndex("ServiceChargesId");

                    b.ToTable("ProjectServiceCharge");
                });

            modelBuilder.Entity("BuzzwordProject", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Buzzword", null)
                        .WithMany()
                        .HasForeignKey("BuzzwordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzwordUserRoleData", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Buzzword", null)
                        .WithMany()
                        .HasForeignKey("BuzzwordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.UserRoleData", null)
                        .WithMany()
                        .HasForeignKey("UserRoleDatasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpertiseAreaProject", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ExpertiseArea", null)
                        .WithMany()
                        .HasForeignKey("ExpertiseAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpertiseAreaUserRoleData", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ExpertiseArea", null)
                        .WithMany()
                        .HasForeignKey("ExpertiseAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.UserRoleData", null)
                        .WithMany()
                        .HasForeignKey("UserRoleDatasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationRole", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.UserRoleData", "UserRoleData")
                        .WithOne("ApplicationUserRole")
                        .HasForeignKey("GhostWriter.Domain.Entities.ApplicationUserRole", "UserRoleDataId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("UserRoleData");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Booking", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.HeadProposal", "HeadProposal")
                        .WithMany()
                        .HasForeignKey("HeadProposalId");

                    b.Navigation("HeadProposal");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.BookingStatusHistory", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingStatusHistories")
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Document", "BinaryDocument")
                        .WithMany()
                        .HasForeignKey("BinaryDocumentId");

                    b.HasOne("GhostWriter.Domain.Entities.HeadProposal", "HeadProposal")
                        .WithOne("Conversation")
                        .HasForeignKey("GhostWriter.Domain.Entities.Conversation", "HeadProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinaryDocument");

                    b.Navigation("HeadProposal");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Dispute", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Booking", "Booking")
                        .WithMany("Disputes")
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Document", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Booking", "Booking")
                        .WithMany("Documents")
                        .HasForeignKey("BookingId");

                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", "UploadedByUser")
                        .WithMany("Documents")
                        .HasForeignKey("UploadedByUserId");

                    b.Navigation("Booking");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.HeadProposal", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", "Ghostwriter")
                        .WithMany("Proposals")
                        .HasForeignKey("GHWId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Ghostwriter");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Message", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Document", "BinaryDocument")
                        .WithMany()
                        .HasForeignKey("BinaryDocumentId");

                    b.HasOne("GhostWriter.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", "SentByUser")
                        .WithMany()
                        .HasForeignKey("SentByUserId");

                    b.Navigation("BinaryDocument");

                    b.Navigation("Conversation");

                    b.Navigation("SentByUser");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Milestone", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Document", "BinaryDocument")
                        .WithMany()
                        .HasForeignKey("BinaryDocumentId");

                    b.HasOne("GhostWriter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("BinaryDocument");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Notification", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.PlagiarismCheckInformation", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Document", "Document")
                        .WithMany("PlagiarismCheckInformation")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Project", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.KindOfWork", "KindOfWork")
                        .WithMany("Projects")
                        .HasForeignKey("KindOfWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("GhostWriter.Domain.Entities.Degree", "MinimumDegree")
                        .WithMany()
                        .HasForeignKey("MinimumDegreeId");

                    b.Navigation("Customer");

                    b.Navigation("KindOfWork");

                    b.Navigation("Language");

                    b.Navigation("MinimumDegree");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Proposal", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Proposal", "ChildProposal")
                        .WithOne("ParentProposal")
                        .HasForeignKey("GhostWriter.Domain.Entities.Proposal", "ChildProposalId");

                    b.HasOne("GhostWriter.Domain.Entities.HeadProposal", "HeadProposal")
                        .WithMany()
                        .HasForeignKey("HeadProposalId");

                    b.Navigation("ChildProposal");

                    b.Navigation("HeadProposal");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ProposalStatusHistory", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Proposal", "Proposal")
                        .WithMany("ProposalStatuses")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Rate", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ServiceCharge", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ServiceChargeType", "ServiceChargeType")
                        .WithMany()
                        .HasForeignKey("ServiceChargeTypeId");

                    b.Navigation("ServiceChargeType");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Booking", "Booking")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.UserRoleData", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Degree", "HighestDegree")
                        .WithMany()
                        .HasForeignKey("HighestDegreeId");

                    b.HasOne("GhostWriter.Domain.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.Navigation("HighestDegree");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("KindOfWorkUserRoleData", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.KindOfWork", null)
                        .WithMany()
                        .HasForeignKey("KindOfWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.UserRoleData", null)
                        .WithMany()
                        .HasForeignKey("UserRoleDatasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageUserRoleData", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.UserRoleData", null)
                        .WithMany()
                        .HasForeignKey("UserRoleDatasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectServiceCharge", b =>
                {
                    b.HasOne("GhostWriter.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostWriter.Domain.Entities.ServiceCharge", null)
                        .WithMany()
                        .HasForeignKey("ServiceChargesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Projects");

                    b.Navigation("Proposals");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingStatusHistories");

                    b.Navigation("Disputes");

                    b.Navigation("Documents");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Document", b =>
                {
                    b.Navigation("PlagiarismCheckInformation");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.HeadProposal", b =>
                {
                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.KindOfWork", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.Proposal", b =>
                {
                    b.Navigation("ParentProposal");

                    b.Navigation("ProposalStatuses");
                });

            modelBuilder.Entity("GhostWriter.Domain.Entities.UserRoleData", b =>
                {
                    b.Navigation("ApplicationUserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
